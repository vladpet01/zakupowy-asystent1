# bot.py ‚Äî –ü–æ–ª–Ω—ã–π –±–æ—Ç –ø–æ "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω—é –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ 1 (–∑–∞—â–∏—â–µ–Ω–æ)"
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
application = ApplicationBuilder().token(BOT_TOKEN).build()


import re
import json
import sqlite3
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional, Tuple

import requests
from bs4 import BeautifulSoup

from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, Application, ContextTypes, CommandHandler,
    MessageHandler, CallbackQueryHandler, ConversationHandler, filters,
    JobQueue
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# =========================
# 1) –ö–æ–Ω—Ñ–∏–≥ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# =========================

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN —Å —Ç–æ–∫–µ–Ω–æ–º –æ—Ç BotFather.")

DB_PATH = os.getenv("DB_PATH", "zakupowy.db")

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
(
    MAIN_MENU,
    ENTER_LIST,
    AFTER_LIST_ACTION,
    CONFIRM_SAVE,
    ENTER_LIST_NAME,
    PLAN_OR_NOT,
    ENTER_PLAN_DATETIME,
    CATEGORIES_PICK,
    EDIT_LIST_ENTER,
    DEALS_RESULT,
    LANG_SELECT
) = range(11)

REGIONAL_SEARCH_LANG = "pl"
DEFAULT_UI_LANG = "ru"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–æ–¥: (emoji, RU, PL, keywords_ru, keywords_pl))
CATEGORIES = {
    "FROZEN":    ("üßä", "–ó–∞–º–æ—Ä–æ–∑–∫–∞", "Mro≈ºonki", ["–∑–∞–º–æ—Ä", "–ª–µ–¥", "–ø–µ–ª—å–º–µ–Ω", "–º–æ—Ä–æ–∂"], ["mro≈º", "l√≥d", "pierogi", "lody"]),
    "PANTRY":    ("ü•´", "–î–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è", "Produkty suche", ["–∫—Ä—É–ø", "–∫–æ–Ω—Å–µ—Ä–≤", "–º–∞–∫–∞—Ä–æ–Ω", "—Ä–∏—Å"], ["kasza", "konserw", "makaron", "ry≈º"]),
    "MEAT":      ("ü•©", "–ú—è—Å–æ", "Miƒôso", ["–º—è—Å", "—Å–≤–∏–Ω–∏–Ω", "–≥–æ–≤—è–¥–∏–Ω", "–∫—É—Ä"], ["miƒôso", "wieprz", "wo≈Çow", "kurcz"]),
    "DAIRY":     ("ü•õ", "–ú–æ–ª–æ—á–∫–∞", "Nabia≈Ç", ["–º–æ–ª–æ–∫", "—Å—ã—Ä", "–π–æ–≥—É—Ä—Ç", "—Å–º–µ—Ç"], ["mleko", "ser", "jogurt", "≈õmiet"]),
    "BAKERY":    ("üçû", "–í—ã–ø–µ—á–∫–∞", "Pieczywo", ["—Ö–ª–µ–±", "–±—É–ª–∫", "–±–∞—Ç–æ–Ω", "–±–∞–≥–µ—Ç"], ["chleb", "bu≈Çka", "bagiet"])
}

# –°–ª–æ–≤–∞—Ä—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (RU/EN->PL)
LEXICON_TO_PL = {
    "–º–æ–ª–æ–∫–æ": "mleko", "—Ö–ª–µ–±": "chleb", "—Å—ã—Ä": "ser", "–π–æ–≥—É—Ä—Ç": "jogurt", "—è–π—Ü–∞": "jajka",
    "—Å–≤–∏–Ω–∏–Ω–∞": "wieprzowina", "–≥–æ–≤—è–¥–∏–Ω–∞": "wo≈Çowina", "–∫—É—Ä–∏—Ü–∞": "kurczak", "–º–∞—Å–ª–æ": "mas≈Ço",
    "corn": "kukurydza", "milk": "mleko", "bread": "chleb", "cheese": "ser", "yogurt": "jogurt",
    "kurczak": "kurczak", "ser": "ser", "mleko": "mleko", "chleb": "chleb", "jogurt": "jogurt",
    "–≤–æ–¥–∞": "woda", "—Å–æ–∫": "sok", "–∫–æ–ª–∞": "cola", "–ø–µ–ø—Å–∏": "pepsi", "–∫–æ—Ñ–µ": "kawa",
    "—á–∞–π": "herbata", "—Å–∞—Ö–∞—Ä": "cukier", "—Å–æ–ª—å": "s√≥l", "–ø–µ—Ä–µ—Ü": "pieprz", "–º—É–∫–∞": "mƒÖka",
    "–º–∞—Å–ª–æ": "olej", "—Ç–æ–º–∞—Ç": "pomidor", "–æ–≥—É—Ä–µ—Ü": "og√≥rek", "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": "ziemniak",
    "–ª—É–∫": "cebula", "—á–µ—Å–Ω–æ–∫": "czosnek", "—è–±–ª–æ–∫–æ": "jab≈Çko", "–±–∞–Ω–∞–Ω": "banan",
    "–∞–ø–µ–ª—å—Å–∏–Ω": "pomara≈Ñcza", "–ª–∏–º–æ–Ω": "cytryna", "–≤–∏–Ω–æ–≥—Ä–∞–¥": "winogrono",
    "–∫–ª—É–±–Ω–∏–∫–∞": "truskawka", "–º–∞–ª–∏–Ω–∞": "malina", "–≥–æ–≤—è–¥–∏–Ω–∞": "wo≈Çowina",
    "–∫—É—Ä–∏—Ü–∞": "kurczak", "–∏–Ω–¥–µ–π–∫–∞": "indyk", "—Ä—ã–±–∞": "ryba", "–ª–æ—Å–æ—Å—å": "≈Çoso≈õ",
    "—Ç—É–Ω–µ—Ü": "tu≈Ñczyk", "–∫—Ä–µ–≤–µ—Ç–∫–∏": "krewetki", "—Å–æ—Å–∏—Å–∫–∏": "kie≈Çbasa",
    "–∫–æ–ª–±–∞—Å–∞": "kie≈Çbasa", "–≤–µ—Ç—á–∏–Ω–∞": "szynka", "–±–µ–∫–æ–Ω": "boczek", "—è–π—Ü–æ": "jajko",
    "–º–æ–ª–æ–∫–æ": "mleko", "–∫–µ—Ñ–∏—Ä": "kefir", "—Ç–≤–æ—Ä–æ–≥": "twar√≥g", "—Å–º–µ—Ç–∞–Ω–∞": "≈õmietana",
    "–π–æ–≥—É—Ä—Ç": "jogurt", "–º–æ—Ä–æ–∂–µ–Ω–æ–µ": "lody", "—Å—ã—Ä": "ser", "–º–∞–∫–∞—Ä–æ–Ω—ã": "makaron",
    "—Ä–∏—Å": "ry≈º", "–≥—Ä–µ—á–∫–∞": "kasza gryczana", "–æ–≤—Å—è–Ω–∫–∞": "p≈Çatki owsiane",
    "–º—É–∫–∞": "mƒÖka", "—Å–∞—Ö–∞—Ä": "cukier", "—Å–æ–ª—å": "s√≥l", "–ø–µ—Ä–µ—Ü": "pieprz",
    "–º–∞—Å–ª–æ": "olej", "—É–∫—Å—É—Å": "ocet", "–∫–µ—Ç—á—É–ø": "keczup", "–º–∞–π–æ–Ω–µ–∑": "majonez",
    "–≥–æ—Ä—á–∏—Ü–∞": "musztarda", "—Ö–ª–µ–±": "chleb", "–±—É–ª–∫–∞": "bu≈Çka", "–±–∞–≥–µ—Ç": "bagietka",
    "–ø–µ—á–µ–Ω—å–µ": "ciastko", "—à–æ–∫–æ–ª–∞–¥": "czekolada", "–∫–æ–Ω—Ñ–µ—Ç—ã": "cukierki",
    "–º–µ–¥": "mi√≥d", "–≤–∞—Ä–µ–Ω—å–µ": "d≈ºem", "–æ—Ä–µ—Ö–∏": "orzechy", "—á–∏–ø—Å—ã": "chipsy",
    "–ø–∏–≤–æ": "piwo", "–≤–∏–Ω–æ": "wino", "–≤–æ–¥–∫–∞": "w√≥dka", "–≤–∏—Å–∫–∏": "whisky",
    "—Å–æ–∫": "sok", "–≤–æ–¥–∞": "woda", "–≥–∞–∑–∏—Ä–æ–≤–∫–∞": "nap√≥j gazowany",
    "–∫–æ—Ñ–µ": "kawa", "—á–∞–π": "herbata", "–∫–∞–∫–∞–æ": "kakao"
}

# UI —Å–ª–æ–≤–∞—Ä—å (RU/PL/EN)
UI = {
    "ru": {
        "greet": "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "menu": ["üìù –ù–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫", "üì¶ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "üõç –ê–∫—Ü–∏–∏ / –°–∫–∏–¥–∫–∏", "üìÇ –°–ø–∏—Å–∫–∏", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"],
        "send_list": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:",
        "after_list": "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—è—Ç. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
        "best": "üîç –ü–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
        "save": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        "delete": "üóë –£–¥–∞–ª–∏—Ç—å",
        "confirm_save": "–ì–æ—Ç–æ–≤–æ. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?",
        "enter_name": "–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫?",
        "saved": "‚úÖ –°–ø–∏—Å–æ–∫ ¬´{name}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        "plan_prompt": "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ ‚è≥ –ù–µ —Å–µ–π—á–∞—Å?",
        "plan": "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "not_now": "‚è≥ –ù–µ —Å–µ–π—á–∞—Å",
        "enter_date": "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM), –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:",
        "plan_ok": "‚úÖ –°–ø–∏—Å–æ–∫ ¬´{name}¬ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {dt}.",
        "saved_no_plan": "‚úÖ –°–ø–∏—Å–æ–∫ ¬´{name}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –±–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
        "deleted": "üóë –£–¥–∞–ª–µ–Ω–æ.",
        "help": "‚ÑπÔ∏è –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –ø–æ —Å–ø–∏—Å–∫—É, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏.\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ ‚Äî —è –ø–µ—Ä–µ–≤–µ–¥—É –∏ –Ω–∞–π–¥—É –Ω–∞ –ø–æ–ª—å—Å–∫–æ–º, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–Ω—É –Ω–∞ —è–∑—ã–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –≤ —Å–∫–æ–±–∫–∞—Ö.",
        "lists_title": "üìÇ –í–∞—à–∏ —Å–ø–∏—Å–∫–∏:",
        "no_lists": "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.",
        "active": "üõí –ê–∫—Ç–∏–≤–Ω—ã–µ",
        "planned": "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ",
        "view": "üîç –õ—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", "edit": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "remove": "üóë –£–¥–∞–ª–∏—Ç—å", "replan": "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å",
        "enter_new_list": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ¬´{name}¬ª:",
        "updated": "‚úÖ –°–ø–∏—Å–æ–∫ ¬´{name}¬ª –æ–±–Ω–æ–≤–ª—ë–Ω.",
        "plan_changed": "‚úÖ –ü–ª–∞–Ω –¥–ª—è ¬´{name}¬ª –æ–±–Ω–æ–≤–ª—ë–Ω: {dt}",
        "reminder": "üìÖ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ ¬´{name}¬ª. –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª—É—á—à–∏–µ —Ü–µ–Ω—ã?",
        "yes_show": "üîç –ü–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", "back": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        "lang_prompt": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        "lang_set": "‚úÖ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {lang}",
        "top_deals": "üõç –¢–æ–ø-{n} –∞–∫—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è:",
        "show_all_deals": "üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ü–∏–∏",
        "filter_category": "üîç –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        "done": "‚úÖ –ì–æ—Ç–æ–≤–æ",
        "pick_categories": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª:",
        "results_header": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:",
        "best_store_all": "–õ—É—á—à–µ –≤—Å–µ–≥–æ –∫—É–ø–∏—Ç—å –≤—Å—ë –≤ {store}",
        "best_combo": "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º: {combo}",
        "nothing_found": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
        "invalid_dt": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-09-05 10:00",
        "saved_as": "–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
        "saved_result_ok": "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç ¬´{name}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        "deals_result": "üõç –ù–∞–π–¥–µ–Ω–æ {count} –∞–∫—Ü–∏–π. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º?",
        "expired": "‚è∞ –ò—Å—Ç—ë–∫—à–∏–π",
        "change_lang": "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "lang_ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        "lang_pl": "üáµüá± Polski", 
        "lang_en": "üá∫üá∏ English",
        "back_to_menu": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    },
    "pl": {
        "greet": "Cze≈õƒá! Wybierz dzia≈Çanie:",
        "menu": ["üìù Napisz listƒô", "üì¶ Wyszukiwanie po kategoriach", "üõç Promocje", "üìÇ Listy", "‚ÑπÔ∏è Pomoc", "üåê Zmie≈Ñ jƒôzyk"],
        "send_list": "Wy≈õlij listƒô produkt√≥w w dowolnym formacie:",
        "after_list": "Lista przyjƒôta. Co zrobiƒá?",
        "best": "üîç Najlepsze oferty",
        "save": "üíæ Zapisz",
        "delete": "üóë Usu≈Ñ",
        "confirm_save": "Gotowe. Zapisaƒá listƒô czy usunƒÖƒá?",
        "enter_name": "Jak nazwaƒá tƒô listƒô?",
        "saved": "‚úÖ Lista ¬´{name}¬ª zapisana.",
        "plan_prompt": "üìÖ Zaplanowaƒá zakupy czy ‚è≥ Nie teraz?",
        "plan": "üìÖ Zaplanuj", "not_now": "‚è≥ Nie teraz",
        "enter_date": "Podaj datƒô i godzinƒô (YYYY-MM-DD HH:MM), czas lokalny:",
        "plan_ok": "‚úÖ Lista ¬´{name}¬ª zaplanowana na {dt}.",
        "saved_no_plan": "‚úÖ Lista ¬´{name}¬ª zapisana bez planowania.",
        "deleted": "üóë Usuniƒôto.",
        "help": "‚ÑπÔ∏è Pomogƒô wybraƒá najlepsze ceny wed≈Çug listy, kategorii albo poka≈ºƒô aktualne promocje.",
        "lists_title": "üìÇ Twoje listy:",
        "no_lists": "Brak zapisanych list.",
        "active": "üõí Aktywne",
        "planned": "üìÖ Zaplanowane",
        "view": "üîç Najlepsze oferty", "edit": "‚úèÔ∏è Edytuj", "remove": "üóë Usu≈Ñ", "replan": "üìÖ Zaplanuj",
        "enter_new_list": "Wy≈õlij nowƒÖ listƒô do aktualizacji ¬´{name}¬ª:",
        "updated": "‚úÖ Lista ¬´{name}¬ª zaktualizowana.",
        "plan_changed": "‚úÖ Plan dla ¬´{name}¬ª ustawiono: {dt}",
        "reminder": "üìÖ Dzi≈õ masz zaplanowanƒÖ listƒô ¬´{name}¬ª. Pokazaƒá najlepsze ceny?",
        "yes_show": "üîç Poka≈º najlepsze oferty", "back": "üîô Menu",
        "lang_prompt": "Wybierz jƒôzyk interfejsu:",
        "lang_set": "‚úÖ Jƒôzyk interfejsu: {lang}",
        "top_deals": "üõç Top-{n} promocji dzi≈õ:",
        "show_all_deals": "üìÇ Poka≈º wszystkie promocje",
        "filter_category": "üîç Filtr kategorii",
        "done": "‚úÖ Gotowe",
        "pick_categories": "Wybierz kategorie, potem ¬´‚úÖ Gotowe¬ª:",
        "results_header": "Wyniki:",
        "best_store_all": "Najlepiej kupiƒá wszystko w {store}",
        "best_combo": "Optymalnie po sklepach: {combo}",
        "nothing_found": "Nie znaleziono aktualnych ofert.",
        "invalid_dt": "‚ùå Z≈Çy format. Np.: 2025-09-05 10:00",
        "saved_as": "Jak nazwaƒá wynik?",
        "saved_result_ok": "‚úÖ Zapisano wynik ¬´{name}¬ª.",
        "deals_result": "üõç Znaleziono {count} promocji. Co zrobiƒá z wynikiem?",
        "expired": "‚è∞ Wygas≈Çy",
        "change_lang": "üåê Zmie≈Ñ jƒôzyk",
        "lang_ru": "üá∑üá∫ Rosyjski",
        "lang_pl": "üáµüá± Polski", 
        "lang_en": "üá∫üá∏ Angielski",
        "back_to_menu": "üîô Powr√≥t do menu"
    },
    "en": {
        "greet": "Hi! Choose an action:",
        "menu": ["üìù Write a list", "üì¶ Category search", "üõç Deals", "üìÇ Lists", "‚ÑπÔ∏è Help", "üåê Change language"],
        "send_list": "Send a product list in any format:",
        "after_list": "List received. What do you want to do?",
        "best": "üîç Show best offers",
        "save": "üíæ Save",
        "delete": "üóë Delete",
        "confirm_save": "Done. Save the list or delete?",
        "enter_name": "What name for this list?",
        "saved": "‚úÖ List ‚Äú{name}‚Äù saved.",
        "plan_prompt": "üìÖ Plan purchases or ‚è≥ Not now?",
        "plan": "üìÖ Plan", "not_now": "‚è≥ Not now",
        "enter_date": "Enter date & time (YYYY-MM-DD HH:MM), local time:",
        "plan_ok": "‚úÖ List ‚Äú{name}‚Äù planned for {dt}.",
        "saved_no_plan": "‚úÖ List ‚Äú{name}‚Äù saved without planning.",
        "deleted": "üóë Deleted.",
        "help": "‚ÑπÔ∏è I can find best prices for your list, categories, or show current deals.",
        "lists_title": "üìÇ Your lists:",
        "no_lists": "No saved lists yet.",
        "active": "üõí Active",
        "planned": "üìÖ Planned",
        "view": "üîç Best offers", "edit": "‚úèÔ∏è Edit", "remove": "üóë Delete", "replan": "üìÖ Plan",
        "enter_new_list": "Send a new list to update ‚Äú{name}‚Äù:",
        "updated": "‚úÖ List ‚Äú{name}‚Äù updated.",
        "plan_changed": "‚úÖ Plan for ‚Äú{name}‚Äù set: {dt}",
        "reminder": "üìÖ Today you planned list ‚Äú{name}‚Äù. Want best prices now?",
        "yes_show": "üîç Show best offers", "back": "üîô Back to menu",
        "lang_prompt": "Choose interface language:",
        "lang_set": "‚úÖ Interface language: {lang}",
        "top_deals": "üõç Top-{n} deals today:",
        "show_all_deals": "üìÇ Show all deals",
        "filter_category": "üîç Filter by category",
        "done": "‚úÖ Done",
        "pick_categories": "Pick categories, then press ‚Äú‚úÖ Done‚Äù:",
        "results_header": "Results:",
        "best_store_all": "Best to buy all in {store}",
        "best_combo": "Optimal by stores: {combo}",
        "nothing_found": "No current offers found.",
        "invalid_dt": "‚ùå Invalid format. Example: 2025-09-05 10:00",
        "saved_as": "Name this result?",
        "saved_result_ok": "‚úÖ Result ‚Äú{name}‚Äù saved.",
        "deals_result": "üõç Found {count} deals. What to do with result?",
        "expired": "‚è∞ Expired",
        "change_lang": "üåê Change language",
        "lang_ru": "üá∑üá∫ Russian",
        "lang_pl": "üáµüá± Polish", 
        "lang_en": "üá∫üá∏ English",
        "back_to_menu": "üîô Back to menu"
    }
}

# =========================
# 2) –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite)
# =========================

def db() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with db() as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            chat_id INTEGER,
            lang_ui TEXT,
            region_lang TEXT
        )""")
        conn.execute("""
        CREATE TABLE IF NOT EXISTS lists (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            name TEXT,
            items_json TEXT,
            created_at TEXT,
            planned_for TEXT,
            status TEXT
        )""")

def upsert_user(user_id: int, chat_id: int, lang_ui: str = DEFAULT_UI_LANG, region_lang: str = REGIONAL_SEARCH_LANG):
    with db() as conn:
        cur = conn.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
        if cur.fetchone():
            conn.execute("UPDATE users SET chat_id=?, lang_ui=?, region_lang=? WHERE user_id=?",
                         (chat_id, lang_ui, region_lang, user_id))
        else:
            conn.execute("INSERT INTO users (user_id, chat_id, lang_ui, region_lang) VALUES (?,?,?,?)",
                         (user_id, chat_id, lang_ui, region_lang))

def set_user_lang(user_id: int, lang_ui: str):
    with db() as conn:
        conn.execute("UPDATE users SET lang_ui=? WHERE user_id=?", (lang_ui, user_id))

def get_user(user_id: int) -> Optional[sqlite3.Row]:
    with db() as conn:
        cur = conn.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
        return cur.fetchone()

def add_list(user_id: int, name: str, items: List[str], planned_for: Optional[str], status: str = "active") -> int:
    with db() as conn:
        cur = conn.execute(
            "INSERT INTO lists (user_id, name, items_json, created_at, planned_for, status) VALUES (?,?,?,?,?,?)",
            (user_id, name, json.dumps(items, ensure_ascii=False), datetime.now().strftime("%Y-%m-%d %H:%M"),
             planned_for, status)
        )
        return cur.lastrowid

def update_list_items(list_id: int, items: List[str]):
    with db() as conn:
        conn.execute("UPDATE lists SET items_json=? WHERE id=?", (json.dumps(items, ensure_ascii=False), list_id))

def update_list_plan(list_id: int, planned_for: Optional[str], status: str):
    with db() as conn:
        conn.execute("UPDATE lists SET planned_for=?, status=? WHERE id=?", (planned_for, status, list_id))

def delete_list(list_id: int):
    with db() as conn:
        conn.execute("DELETE FROM lists WHERE id=?", (list_id,))

def get_user_lists(user_id: int) -> Tuple[List[sqlite3.Row], List[sqlite3.Row]]:
    with db() as conn:
        act = conn.execute("SELECT * FROM lists WHERE user_id=? AND (status='active' OR status IS NULL) ORDER BY id DESC", (user_id,)).fetchall()
        plan = conn.execute("SELECT * FROM lists WHERE user_id=? AND status='planned' ORDER BY planned_for ASC", (user_id,)).fetchall()
        return act, plan

def get_list_by_id(list_id: int) -> Optional[sqlite3.Row]:
    with db() as conn:
        cur = conn.execute("SELECT * FROM lists WHERE id=?", (list_id,))
        return cur.fetchone()

def get_expired_lists() -> List[sqlite3.Row]:
    with db() as conn:
        return conn.execute(
            "SELECT * FROM lists WHERE status='planned' AND planned_for < datetime('now')"
        ).fetchall()

# =========================
# 3) –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å –∏ —É—Ç–∏–ª–∏—Ç—ã
# =========================

def lang_of(update: Update) -> str:
    code = (update.effective_user.language_code or DEFAULT_UI_LANG).split("-")[0]
    return code if code in UI else DEFAULT_UI_LANG

def get_ui_lang(update: Update) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫"""
    user_id = update.effective_user.id
    user = get_user(user_id)
    if user and user["lang_ui"]:
        return user["lang_ui"]
    return lang_of(update)

def t(lang: str, key: str, **kwargs) -> str:
    base = UI.get(lang, UI[DEFAULT_UI_LANG]).get(key, key)
    return base.format(**kwargs) if kwargs else base

def normalize_items(raw_text: str) -> List[str]:
    text = raw_text.replace("\n", ",").replace(";", ",")
    parts = re.split(r"[,\s]+", text.strip())
    return [p.strip().lower() for p in parts if p.strip()]

def to_polish_token(token: str) -> str:
    return LEXICON_TO_PL.get(token.lower(), token.lower())

def translate_list_to_pl(items: List[str]) -> List[str]:
    return [to_polish_token(x) for x in items]

def main_menu_kbd(lang: str) -> ReplyKeyboardMarkup:
    m = UI[lang]["menu"]
    return ReplyKeyboardMarkup(
        [[m[0], m[1]], [m[2], m[3]], [m[4], m[5]]],
        resize_keyboard=True
    )

def categories_kbd(lang: str) -> ReplyKeyboardMarkup:
    rows = []
    row = []
    for code, (emoji, ru, pl, _, _) in CATEGORIES.items():
        row.append(f"{emoji} {ru if lang=='ru' else pl if lang=='pl' else pl}")
        if len(row) == 2:
            rows.append(row)
            row = []
    if row: rows.append(row)
    rows.append([UI[lang]["done"]])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def lang_select_kbd() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([
        [UI["ru"]["lang_ru"], UI["pl"]["lang_pl"], UI["en"]["lang_en"]],
        [UI["ru"]["back_to_menu"]]
    ], resize_keyboard=True)

def parse_category_label_to_code(label: str, lang: str) -> Optional[str]:
    label = label.strip()
    for code, (emoji, ru, pl, _, _) in CATEGORIES.items():
        loc = ru if lang == "ru" else pl
        if label.startswith(emoji):
            return code
        if label == f"{emoji} {loc}":
            return code
    return None

# =========================
# 4) –ü–∞—Ä—Å–µ—Ä—ã –∞–∫—Ü–∏–π
# =========================

def parse_price_to_float(text: str) -> Optional[float]:
    if not text:
        return None
    m = re.findall(r"[\d]+[.,]\d+|[\d]+", text.replace(" ", ""))
    if not m:
        return None
    try:
        return float(m[0].replace(",", "."))
    except:
        return None

def offer_dict(name_pl: str, price: Optional[float], store: str, url: str = "", discount: Optional[float] = None) -> Dict[str, Any]:
    return {
        "name_pl": name_pl,
        "price": price,
        "store": store,
        "url": url,
        "discount": discount,
        "availability": True,
        "category": infer_category(name_pl or "")
    }

def infer_category(name_pl_lower: str) -> Optional[str]:
    n = name_pl_lower.lower()
    for code, (_, _ru, _pl, kw_ru, kw_pl) in CATEGORIES.items():
        if any(k in n for k in kw_pl) or any(k in n for k in kw_ru):
            return code
    return None

def fetch_promotions_leclerc() -> List[Dict[str, Any]]:
    url = "https://rzeszow.leclerc.pl/promocje"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        r = requests.get(url, headers=headers, timeout=20)
        r.raise_for_status()
    except Exception:
        return []
    soup = BeautifulSoup(r.text, "html.parser")
    offers: List[Dict[str, Any]] = []
    cards = soup.select(".product-card, .product, .product-tile, .productBox")
    for card in cards:
        name_el = card.select_one(".product-name, .name, .title, .productTitle")
        price_el = card.select_one(".product-price, .price, .value, .productPrice")
        name = (name_el.get_text(strip=True) if name_el else "").lower()
        if not name:
            continue
        price = parse_price_to_float(price_el.get_text(strip=True)) if price_el else None
        offers.append(offer_dict(name_pl=name, price=price, store="Leclerc", url=url))
    return offers

def fetch_promotions_auchan() -> List[Dict[str, Any]]:
    url = "https://www.auchan.pl/pl/sklepy/auchan-rzeszow-krasne"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        r = requests.get(url, headers=headers, timeout=20)
        r.raise_for_status()
    except Exception:
        return []
    soup = BeautifulSoup(r.text, "html.parser")
    offers: List[Dict[str, Any]] = []
    cards = soup.select(".product-tile, .product, .promo, .productBox")
    for card in cards:
        name_el = card.select_one(".product-name, .name, .title, .productTitle")
        price_el = card.select_one(".product-price, .price, .value, .productPrice")
        name = (name_el.get_text(strip=True) if name_el else "").lower()
        if not name:
            continue
        price = parse_price_to_float(price_el.get_text(strip=True)) if price_el else None
        offers.append(offer_dict(name_pl=name, price=price, store="Auchan", url=url))
    return offers

def fetch_promotions_lidl() -> List[Dict[str, Any]]:
    url = "https://www.lidl.pl/oferty"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        r = requests.get(url, headers=headers, timeout=20)
        r.raise_for_status()
    except Exception:
        return []
    soup = BeautifulSoup(r.text, "html.parser")
    offers: List[Dict[str, Any]] = []
    cards = soup.select(".product-box, .product, .tile, .productBox")
    for card in cards:
        name_el = card.select_one(".product-title, .title, .name, .productTitle")
        price_el = card.select_one(".product-price, .price, .value, .productPrice")
        name = (name_el.get_text(strip=True) if name_el else "").lower()
        if not name:
            continue
        price = parse_price_to_float(price_el.get_text(strip=True)) if price_el else None
        offers.append(offer_dict(name_pl=name, price=price, store="Lidl", url=url))
    return offers

async def get_all_promotions_async() -> List[Dict[str, Any]]:
    results = await asyncio.gather(
        asyncio.to_thread(fetch_promotions_leclerc),
        asyncio.to_thread(fetch_promotions_auchan),
        asyncio.to_thread(fetch_promotions_lidl),
        return_exceptions=True
    )
    offers: List[Dict[str, Any]] = []
    for res in results:
        if isinstance(res, Exception):
            continue
        offers.extend(res)
    cleaned = []
    for o in offers:
        if not o.get("name_pl"):
            continue
        o["name_pl"] = o["name_pl"].strip().lower()
        cleaned.append(o)
    return cleaned

# =========================
# 5) Matching / Best offers
# =========================

def best_offers_for_items(items_ui: List[str], offers: List[Dict[str, Any]]) -> Tuple[List[Dict[str, Any]], Dict[str, Any]]:
    items_pl = translate_list_to_pl(items_ui)
    results = []
    store_count = {}
    for ui, pl in zip(items_ui, items_pl):
        matched = [o for o in offers if pl in o["name_pl"]]
        if not matched:
            results.append({"ui": ui, "pl": pl, "found": False})
            continue
        best = sorted([m for m in matched if m["price"] is not None], key=lambda x: x["price"])[:1]
        if not best:
            results.append({"ui": ui, "pl": pl, "found": False})
            continue
        b = best[0]
        results.append({
            "ui": ui, "pl": pl, "found": True,
            "price": b["price"], "store": b["store"], "url": b.get("url", "")
        })
        store_count[b["store"]] = store_count.get(b["store"], 0) + 1

    recommendation = {}
    if store_count:
        best_store = max(store_count.items(), key=lambda kv: kv[1])[0]
        recommendation = {"best_store": best_store}
    return results, recommendation

def format_best_offers(lang: str, results: List[Dict[str, Any]], recommendation: Dict[str, Any]) -> str:
    lines = [UI[lang]["results_header"]]
    for r in results:
        if not r["found"]:
            lines.append(f"‚ùå {r['ui']} [ {r['pl']} ] ‚Äî {UI[lang]['nothing_found']}")
        else:
            price = f"{r['price']:.2f} z≈Ç" if r['price'] else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            lines.append(f"‚úÖ {r['ui']} ‚Äî {price} ({r['store']}) [ {r['pl']} ]")
    if recommendation.get("best_store"):
        lines.append("")
        lines.append(UI[lang]["best_store_all"].format(store=recommendation["best_store"]))
    return "\n".join(lines)

def format_category_results(lang: str, offers: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    lines = [f"üõç {UI[lang]['results_header']}"]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    by_store = {}
    for offer in offers:
        store = offer.get("store", "Unknown")
        if store not in by_store:
            by_store[store] = []
        by_store[store].append(offer)
    
    for store, store_offers in by_store.items():
        lines.append(f"\nüè™ **{store}**:")
        for offer in store_offers[:5]:
            price = f"{offer['price']:.2f} z≈Ç" if offer.get('price') else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            lines.append(f"‚Ä¢ {offer['name_pl']} ‚Äî {price}")
    
    if len(offers) > 15:
        lines.append(f"\nüìä –ü–æ–∫–∞–∑–∞–Ω–æ {min(15, len(offers))} –∏–∑ {len(offers)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    
    return "\n".join(lines)

# =========================
# 6) –ú–µ–Ω—é –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏
# =========================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    init_db()
    user = update.effective_user
    ui_lang = lang_of(update)
    upsert_user(user.id, update.effective_chat.id, ui_lang, REGIONAL_SEARCH_LANG)
    await update.message.reply_text(t(ui_lang, "greet"), reply_markup=main_menu_kbd(ui_lang))
    await schedule_all_jobs(context.application)
    return MAIN_MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    await update.message.reply_text(UI[ui_lang]["help"], reply_markup=main_menu_kbd(ui_lang))
    return MAIN_MENU

# ---- üìù –ù–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫

async def write_list_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    await update.message.reply_text(t(ui_lang, "send_list"))
    return ENTER_LIST

async def receive_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    text = update.message.text or ""
    items_ui = normalize_items(text)
    if not items_ui:
        await update.message.reply_text(UI[ui_lang]["send_list"])
        return ENTER_LIST
    context.user_data["temp_items_ui"] = items_ui
    kbd = ReplyKeyboardMarkup([[UI[ui_lang]["best"]], [UI[ui_lang]["save"], UI[ui_lang]["delete"]]], resize_keyboard=True)
    await update.message.reply_text(t(ui_lang, "after_list"), reply_markup=kbd)
    return AFTER_LIST_ACTION

async def after_list_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    choice = update.message.text.strip()
    if choice.startswith("üîç"):
        items_ui = context.user_data.get("temp_items_ui", [])
        offers = await get_all_promotions_async()
        results, rec = best_offers_for_items(items_ui, offers)
        context.user_data["temp_result_payload"] = {"type": "best_offers", "items_ui": items_ui, "results": results}
        await update.message.reply_text(
            format_best_offers(ui_lang, results, rec),
            reply_markup=ReplyKeyboardMarkup([[UI[ui_lang]["save"], UI[ui_lang]["delete"]]], resize_keyboard=True)
        )
        return CONFIRM_SAVE
    elif choice.startswith("üíæ"):
        await update.message.reply_text(UI[ui_lang]["enter_name"])
        context.user_data["save_payload"] = {"type": "list_raw", "items_ui": context.user_data.get("temp_items_ui", [])}
        return ENTER_LIST_NAME
    else:
        context.user_data.pop("temp_items_ui", None)
        context.user_data.pop("temp_result_payload", None)
        await update.message.reply_text(UI[ui_lang]["deleted"], reply_markup=main_menu_kbd(ui_lang))
        return MAIN_MENU

async def confirm_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    if update.message.text.startswith("üíæ"):
        await update.message.reply_text(UI[ui_lang]["enter_name"])
        payload = context.user_data.get("temp_result_payload")
        if not payload:
            payload = {"type": "list_raw", "items_ui": context.user_data.get("temp_items_ui", [])}
        context.user_data["save_payload"] = payload
        return ENTER_LIST_NAME
    else:
        context.user_data.pop("temp_result_payload", None)
        await update.message.reply_text(UI[ui_lang]["deleted"], reply_markup=main_menu_kbd(ui_lang))
        return MAIN_MENU

async def save_list_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    name = (update.message.text or "").strip()
    if not name:
        await update.message.reply_text(UI[ui_lang]["enter_name"])
        return ENTER_LIST_NAME
    
    payload = context.user_data.get("save_payload", {})
    items_ui: List[str] = []

    if payload.get("type") == "best_offers":
        items_ui = payload.get("items_ui", [])
    elif payload.get("type") == "list_raw":
        items_ui = payload.get("items_ui", [])
    elif payload.get("type") == "deals_list":
        items_ui = payload.get("items_ui", [])
    else:
        items_ui = context.user_data.get("temp_items_ui", [])

    user_id = update.effective_user.id
    list_id = add_list(user_id, name, items_ui, planned_for=None, status="active")
    context.user_data["last_saved_list"] = {"id": list_id, "name": name}

    await update.message.reply_text(
        t(ui_lang, "saved").format(name=name),
        reply_markup=ReplyKeyboardMarkup([[UI[ui_lang]["plan"], UI[ui_lang]["not_now"]]], resize_keyboard=True)
    )
    return PLAN_OR_NOT

async def plan_or_not(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    txt = update.message.text.strip()
    last = context.user_data.get("last_saved_list", {})
    if txt.startswith("üìÖ"):
        await update.message.reply_text(UI[ui_lang]["enter_date"])
        return ENTER_PLAN_DATETIME
    else:
        await update.message.reply_text(
            t(ui_lang, "saved_no_plan").format(name=last.get("name", "")),
            reply_markup=main_menu_kbd(ui_lang)
        )
        return MAIN_MENU

async def enter_plan_dt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    dt_str = (update.message.text or "").strip()
    try:
        plan_dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")
    except ValueError:
        await update.message.reply_text(UI[ui_lang]["invalid_dt"])
        return ENTER_PLAN_DATETIME
    
    last = context.user_data.get("last_saved_list", {})
    if not last:
        await update.message.reply_text(UI[ui_lang]["invalid_dt"], reply_markup=main_menu_kbd(ui_lang))
        return MAIN_MENU
    
    update_list_plan(last["id"], plan_dt.strftime("%Y-%m-%d %H:%M"), "planned")
    await schedule_job_for_list(context.application, update.effective_user.id, last["id"], plan_dt)
    
    await update.message.reply_text(
        t(ui_lang, "plan_ok").format(name=last["name"], dt=dt_str),
        reply_markup=main_menu_kbd(ui_lang)
    )
    return MAIN_MENU

# ---- üì¶ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

async def categories_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    context.user_data["picked_categories"] = set()
    await update.message.reply_text(UI[ui_lang]["pick_categories"], reply_markup=categories_kbd(ui_lang))
    return CATEGORIES_PICK

async def categories_pick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    text = update.message.text.strip()
    if text == UI[ui_lang]["done"]:
        picked_codes = context.user_data.get("picked_categories", set())
        if not picked_codes:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=categories_kbd(ui_lang))
            return CATEGORIES_PICK
        
        offers = await get_all_promotions_async()
        filtered_offers = [o for o in offers if o.get("category") in picked_codes]
        
        if not filtered_offers:
            await update.message.reply_text(UI[ui_lang]["nothing_found"], reply_markup=main_menu_kbd(ui_lang))
            return MAIN_MENU
        
        results_text = format_category_results(ui_lang, filtered_offers)
        context.user_data["temp_result_payload"] = {
            "type": "deals_list",
            "items_ui": [f"–ê–∫—Ü–∏–∏ {', '.join(picked_codes)}"],
            "results": filtered_offers
        }
        
        await update.message.reply_text(
            results_text,
            reply_markup=ReplyKeyboardMarkup([[UI[ui_lang]["save"], UI[ui_lang]["delete"]]], resize_keyboard=True)
        )
        return CONFIRM_SAVE
    else:
        code = parse_category_label_to_code(text, ui_lang)
        if code:
            picked = context.user_data.get("picked_categories", set())
            if code in picked:
                picked.remove(code)
            else:
                picked.add(code)
            context.user_data["picked_categories"] = picked
            
        await update.message.reply_text(UI[ui_lang]["pick_categories"], reply_markup=categories_kbd(ui_lang))
        return CATEGORIES_PICK

# ---- üõç –ê–∫—Ü–∏–∏ / –°–∫–∏–¥–∫–∏

async def deals_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    await update.message.reply_text("üîç –ò—â—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏...")
    
    offers = await get_all_promotions_async()
    if not offers:
        await update.message.reply_text(UI[ui_lang]["nothing_found"], reply_markup=main_menu_kbd(ui_lang))
        return MAIN_MENU
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∞–∫—Ü–∏–π
    top_offers = sorted([o for o in offers if o.get("price")], key=lambda x: x["price"])[:10]
    results_text = format_category_results(ui_lang, top_offers)
    
    context.user_data["temp_result_payload"] = {
        "type": "deals_list",
        "items_ui": [f"–¢–æ–ø –∞–∫—Ü–∏–π {datetime.now().strftime('%Y-%m-%d')}"],
        "results": top_offers
    }
    
    await update.message.reply_text(
        results_text,
        reply_markup=ReplyKeyboardMarkup([[UI[ui_lang]["save"], UI[ui_lang]["delete"]]], resize_keyboard=True)
    )
    return CONFIRM_SAVE

# ---- üìÇ –°–ø–∏—Å–∫–∏

async def lists_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    user_id = update.effective_user.id
    active_lists, planned_lists = get_user_lists(user_id)
    
    if not active_lists and not planned_lists:
        await update.message.reply_text(UI[ui_lang]["no_lists"], reply_markup=main_menu_kbd(ui_lang))
        return MAIN_MENU
    
    text = f"{UI[ui_lang]['lists_title']}\n\n"
    
    if active_lists:
        text += f"üõí {UI[ui_lang]['active']}:\n"
        for lst in active_lists:
            text += f"‚Ä¢ {lst['name']} ({len(json.loads(lst['items_json']))} items)\n"
    
    if planned_lists:
        text += f"\nüìÖ {UI[ui_lang]['planned']}:\n"
        for lst in planned_lists:
            planned_date = datetime.strptime(lst['planned_for'], "%Y-%m-%d %H:%M").strftime("%d.%m.%Y %H:%M")
            text += f"‚Ä¢ {lst['name']} - {planned_date}\n"
    
    await update.message.reply_text(text, reply_markup=main_menu_kbd(ui_lang))
    return MAIN_MENU

# ---- üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫

async def change_lang_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui_lang = get_ui_lang(update)
    await update.message.reply_text(UI[ui_lang]["lang_prompt"], reply_markup=lang_select_kbd())
    return LANG_SELECT

async def lang_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    
    if text == UI["ru"]["lang_ru"]:
        set_user_lang(user_id, "ru")
        lang_code = "ru"
    elif text == UI["pl"]["lang_pl"]:
        set_user_lang(user_id, "pl")
        lang_code = "pl"
    elif text == UI["en"]["lang_en"]:
        set_user_lang(user_id, "en")
        lang_code = "en"
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞.", reply_markup=main_menu_kbd(get_ui_lang(update)))
        return MAIN_MENU
    
    await update.message.reply_text(
        UI[lang_code]["lang_set"].format(lang=lang_code),
        reply_markup=main_menu_kbd(lang_code)
    )
    return MAIN_MENU

# ---- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

async def schedule_all_jobs(application: Application):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–ø–∏—Å–∫–∞—Ö"""
    with db() as conn:
        planned_lists = conn.execute(
            "SELECT * FROM lists WHERE status = 'planned' AND planned_for > datetime('now')"
        ).fetchall()
        
        for list_row in planned_lists:
            planned_dt = datetime.strptime(list_row["planned_for"], "%Y-%m-%d %H:%M")
            await schedule_job_for_list(application, list_row["user_id"], list_row["id"], planned_dt)

async def schedule_job_for_list(application: Application, user_id: int, list_id: int, planned_dt: datetime):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    job_queue = application.job_queue
    if job_queue:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        current_jobs = job_queue.get_jobs_by_name(f"reminder_{list_id}")
        for job in current_jobs:
            job.schedule_removal()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        job_queue.run_once(
            send_reminder_callback,
            planned_dt,
            data={"user_id": user_id, "list_id": list_id},
            name=f"reminder_{list_id}"
        )

async def send_reminder_callback(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
    job = context.job
    user_id = job.data["user_id"]
    list_id = job.data["list_id"]
    
    list_data = get_list_by_id(list_id)
    if not list_data:
        return
    
    user = get_user(user_id)
    if not user:
        return
    
    lang = user["lang_ui"]
    keyboard = ReplyKeyboardMarkup([
        [UI[lang]["yes_show"]],
        [UI[lang]["back"]]
    ], resize_keyboard=True)
    
    try:
        await context.bot.send_message(
            chat_id=user["chat_id"],
            text=UI[lang]["reminder"].format(name=list_data["name"]),
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# =========================
# 7) –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# =========================

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex("^üìù"), write_list_entry),
                MessageHandler(filters.Regex("^üì¶"), categories_entry),
                MessageHandler(filters.Regex("^üõç"), deals_entry),
                MessageHandler(filters.Regex("^üìÇ"), lists_entry),
                MessageHandler(filters.Regex("^‚ÑπÔ∏è"), help_command),
                MessageHandler(filters.Regex("^üåê"), change_lang_entry),
            ],
            ENTER_LIST: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_list)],
            AFTER_LIST_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, after_list_action)],
            CONFIRM_SAVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_save)],
            ENTER_LIST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_list_name)],
            PLAN_OR_NOT: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_or_not)],
            ENTER_PLAN_DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_plan_dt)],
            CATEGORIES_PICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, categories_pick)],
            LANG_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, lang_select)],
        },
        fallbacks=[CommandHandler('start', start)],
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()